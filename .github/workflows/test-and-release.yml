name: Run tests from package.json

on:
  push:
    branches:
      - master
      - main
      - beta
  pull_request:
    branches:
      - master
      - main

jobs:
  test:
    name: 'Build and test on node v${{ matrix.node }}'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14, 16]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
            node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci

      - name: Run code linting
        run: npm run test

  npm-release:
    name: 'Release to npm'
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name != 'pull_request' && startsWith(github.repository, 'svrooij/') && github.ref == 'refs/heads/master'
    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use node 14
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: npm ci

      - uses: svrooij/secret-gate-action@v1
        id: mygate
        with:
          inputsToCheck: 'NPM_TOKEN'
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        if: steps.mygate.outputs.inputsChecked == 'true'
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Setup node for Github Registry
      #   if: steps.semantic.outputs.new_release_published == 'true'
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 14
      #     registry-url: 'https://npm.pkg.github.com'
      #     scope: 'svrooij'

      # - name: Publish To GitHub Package Registry
      #   if: steps.semantic.outputs.new_release_published == 'true'
      #   run: |
      #     sed -i 's+"name": "@svrooij/sonos-tts-polly"+"name": "@svrooij/node-sonos-tts-polly""+g' package**.json
      #     npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
  container-release:
    runs-on: ubuntu-latest
    name: Container release
    needs: [npm-release]
    if: needs.npm-release.outputs.released == 'true'
    steps:
      - uses: actions/checkout@v2

      -
        name: Set up QEMU (multi platform)
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish container as latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --push \
            -f ./Dockerfile.npm \
            -t svrooij/sonos-tts-polly:latest \
            -t svrooij/sonos-tts-polly:${{ needs.npm-release.outputs.version }} \
            -t ghcr.io/svrooij/node-sonos-tts-polly:latest \
            -t ghcr.io/svrooij/node-sonos-tts-polly:${{ needs.npm-release.outputs.version }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg BUILD_VERSION=${{ needs.npm-release.outputs.version }} \
            --build-arg VCS_REF=$(echo ${GITHUB_SHA} | cut -c1-8) \
            .

  container-no-distro:
    runs-on: ubuntu-latest
    name: Container release (no distro)
    needs: [test]
    if: github.event_name != 'pull_request' && startsWith(github.repository, 'svrooij/') && github.ref == 'refs/heads/beta'
    steps:
      - uses: actions/checkout@v2

      -
        name: Set up QEMU (multi platform)
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish container as no-distro
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm/v7,linux/arm64 \
            --push \
            -f ./Dockerfile.no-distro \
            -t svrooij/sonos-tts-polly:no-distro \
            -t ghcr.io/svrooij/node-sonos-tts-polly:no-distro \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg BUILD_VERSION=beta \
            --build-arg VCS_REF=$(echo ${GITHUB_SHA} | cut -c1-8) \
            .

